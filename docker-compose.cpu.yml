# 功能说明: Docker Compose CPU 版配置文件。此文件定义了 MAESTRO 应用程序在仅 CPU 环境下运行所需的所有 Docker 服务，包括 PostgreSQL 数据库、Nginx 反向代理、后端、前端、文档处理器和命令行工具，且不包含任何 GPU 相关配置。

services:
  # PostgreSQL 数据库
  postgres:
    image: pgvector/pgvector:pg15
    container_name: maestro-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-maestro_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-maestro_password}
      POSTGRES_DB: ${POSTGRES_DB:-maestro_db}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - maestro-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-maestro_user} -d ${POSTGRES_DB:-maestro_db}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Nginx 反向代理 - 应用程序的单一入口点
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: maestro-nginx
    container_name: maestro-nginx
    ports:
      - "${MAESTRO_PORT:-80}:80"
    depends_on:
      - backend
      - frontend
    networks:
      - maestro-network
    restart: unless-stopped

  backend:
    build:
      context: ./maestro_backend
      dockerfile: Dockerfile
    image: maestro-backend
    container_name: maestro-backend
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - maestro-data:/app/ai_researcher/data
      - ./maestro_model_cache:/root/.cache/huggingface
      - ./maestro_datalab_cache:/root/.cache/datalab
      - ./reports:/app/reports
      - ./maestro_backend/data:/app/data
    working_dir: /app
    environment:
      - MAX_WORKER_THREADS=${MAX_WORKER_THREADS:-10}
      - TZ=${TZ:-UTC}
      - LOG_LEVEL=${LOG_LEVEL:-ERROR}
      # 强制 CPU 模式
      - FORCE_CPU_MODE=true
      - PREFERRED_DEVICE_TYPE=cpu
      # 反向代理支持的 CORS 配置
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-*}
      # 在开发模式下使用 Nginx 代理时允许所有源
      - ALLOW_CORS_WILDCARD=${ALLOW_CORS_WILDCARD:-true}
      # PostgreSQL 连接
      - DATABASE_URL=postgresql://${POSTGRES_USER:-maestro_user}:${POSTGRES_PASSWORD:-maestro_password}@${POSTGRES_HOST:-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-maestro_db}
      # 用于初始设置的管理员凭据
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin123}
      # 用于身份验证的 JWT 密钥
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-change-this}
    networks:
      - maestro-network
    # CPU-only 模式下没有 GPU 配置

  frontend:
    build:
      context: ./maestro_frontend
      dockerfile: Dockerfile
    image: maestro-frontend
    container_name: maestro-frontend
    depends_on:
      - backend
    networks:
      - maestro-network
    environment:
      # API URL (可选 - 默认通过 Nginx 代理使用相对 URL)
      - VITE_SERVER_TIMEZONE=${VITE_SERVER_TIMEZONE:-UTC}
      - TZ=${TZ:-UTC}
      - LOG_LEVEL=${LOG_LEVEL:-ERROR}

  doc-processor:
    build:
      context: ./maestro_backend
      dockerfile: Dockerfile
    image: maestro-doc-processor
    container_name: maestro-doc-processor
    command: ["python", "-u", "services/background_document_processor.py"]
    working_dir: /app
    volumes:
      - maestro-data:/app/ai_researcher/data
      - ./maestro_model_cache:/root/.cache/huggingface
      - ./maestro_datalab_cache:/root/.cache/datalab
      - ./reports:/app/reports
      - ./maestro_backend/data:/app/data
    depends_on:
      - backend
    networks:
      - maestro-network
    environment:
      - TZ=${TZ:-UTC}
      - LOG_LEVEL=${LOG_LEVEL:-ERROR}
      # PostgreSQL 连接 - 与后端相同
      - DATABASE_URL=postgresql://${POSTGRES_USER:-maestro_user}:${POSTGRES_PASSWORD:-maestro_password}@${POSTGRES_HOST:-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-maestro_db}
      # 强制 CPU 模式
      - FORCE_CPU_MODE=true
      - PREFERRED_DEVICE_TYPE=cpu
    # CPU-only 模式下没有 GPU 配置

  cli:
    build:
      context: ./maestro_backend
      dockerfile: Dockerfile
    image: maestro-cli
    container_name: maestro-cli
    command: ["bash"]
    stdin_open: true
    tty: true
    working_dir: /app
    volumes:
      - maestro-data:/app/ai_researcher/data
      - ./maestro_model_cache:/root/.cache/huggingface
      - ./maestro_datalab_cache:/root/.cache/datalab
      - ./reports:/app/reports
      - ./maestro_backend/data:/app/data
    depends_on:
      - backend
    networks:
      - maestro-network
    environment:
      - TZ=${TZ:-UTC}
      - LOG_LEVEL=${LOG_LEVEL:-ERROR}
      # 强制 CPU 模式
      - FORCE_CPU_MODE=true
      - PREFERRED_DEVICE_TYPE=cpu
    # CPU-only 模式下没有 GPU 配置

  # 可选的本地 LLM 服务 (如果使用则取消注释)
  # ollama:
  #   image: ollama/ollama:latest
  #   container_name: maestro-ollama
  #   ports:
  #     - "${LOCAL_LLM_HOST:-127.0.0.1}:${LOCAL_LLM_PORT:-5000}:${LOCAL_LLM_INTERNAL_PORT:-11434}"
  #   volumes:
  #     - ollama-data:/root/.ollama
  #   networks:
  #     - maestro-network
  #   restart: unless-stopped

volumes:
  postgres-data:
    driver: local
  maestro-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./maestro_data
  # 如果使用本地 LLM 则取消注释
  # ollama-data:
  #   driver: local

networks:
  maestro-network:
    driver: bridge